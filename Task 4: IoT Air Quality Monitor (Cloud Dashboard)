Task 4: IoT Air Quality Monitor (Cloud Dashboard)
This task involves reading sensor data and pushing it to a cloud platform for visualization.
Components:
● ESP8266 (NodeMCU) or ESP32
● Air Quality Sensor(s):
○ PM2.5 Sensor: PMS5003, PMS7003 (requires UART/Serial connection)
○ CO2 Sensor: MH-Z19B (requires UART/Serial or PWM)
○ (Alternative/Simpler): MQ-135 (general air quality/gas sensor - analog output), DHT22 (Temperature/Humidity - digital)
● Jumper Wires
● Breadboard
● Wi-Fi Connection
● Cloud Platform Account (e.g., ThingSpeak, Adafruit IO, Ubidots)
Concept (Using ThingSpeak):
1. Set up ThingSpeak: Create an account, create a new Channel. Define Fields for your data (e.g., Field 1 for PM2.5, Field 2 for CO2, Field 3 for Temperature, etc.). Note your Channel ID and Write API Key.
2. Wire the sensors to the ESP8266/ESP32. PM sensors and CO2 sensors often use UART (Serial communication). You might need to use SoftwareSerial on ESP8266 if you need multiple serial ports, or use the ESP32's extra hardware serial ports. Analog sensors (like MQ-135) connect to analog input pins. DHT sensors connect to digital pins.
3. Install necessary libraries for your specific sensors (e.g., PMS.h for PMS5003, MHZ19.h for MH-Z19B, DHT.h for DHT sensors) and the ThingSpeak library.
4. Write code to:
○ Connect to Wi-Fi.
○ Initialize communication with the sensors.
○ Periodically (e.g., every minute) read data from the sensors.
○ Format the data and send it to your ThingSpeak channel fields using the Write API Key.
ESP8266/ESP32 Code (Example using PMS5003, MH-Z19B, and ThingSpeak):
Note: This assumes you have installed the necessary libraries for PMS5003 and MH-Z19B. Wiring depends on whether you use HardwareSerial or SoftwareSerial.

#include <ESP8266WiFi.h> // Use <WiFi.h> for ESP32
#include "ThingSpeak.h"    // Include ThingSpeak library
#include <SoftwareSerial.h> // For software serial communication
#include "PMS.h"        // Library for PMS5003/7003 air quality sensor
#include "MHZ19.h"      // Library for MH-Z19B CO2 sensor

// --- Configuration Section ---
// WiFi Credentials
const char ssid[] = "YOUR_WIFI_SSID";     // Replace with your WiFi SSID
const char pass[] = "YOUR_WIFI_PASSWORD"; // Replace with your WiFi password

// ThingSpeak Configuration
const unsigned long myChannelNumber = YOUR_THINGSPEAK_CHANNEL_ID;     // Replace with your ThingSpeak Channel ID
const char *myWriteAPIKey = "YOUR_THINGSPEAK_WRITE_API_KEY"; // Replace with your ThingSpeak Write API Key

// Sensor Pins (Adjust as needed for your ESP8266/ESP32)
// Example using SoftwareSerial on NodeMCU:
// PMS5003: D5 (GPIO14) - RX, D6 (GPIO12) - TX
// MH-Z19B: D7 (GPIO13) - RX, D8 (GPIO15) - TX
SoftwareSerial pmsSerial(D5, D6); // RX, TX  (PMS5003)
SoftwareSerial mhzSerial(D7, D8); // RX, TX (MH-Z19B)

// Sensor Objects
PMS pms(pmsSerial);       // PMS5003 sensor object
PMS::DATA pmsData;       // Structure to hold PMS5003 data
MHZ19 mhz19Sensor;     // MH-Z19B sensor object

// Update interval for sending data to ThingSpeak (in milliseconds)
const unsigned long updateInterval = 60000; // Send data every 60 seconds (60000 ms)
unsigned long lastUpdateTime = 0;         // Stores the last time data was sent

// --- End of Configuration Section ---

WiFiClient client; // WiFi client object for network communication

// Function to connect to WiFi
void connectToWiFi() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);
  int wifiConnectAttempts = 0;
  while (WiFi.status() != WL_CONNECTED && wifiConnectAttempts < 30) { // Increased attempts
    delay(500);
    Serial.print(".");
    wifiConnectAttempts++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected!");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFailed to connect to WiFi. Restarting...");
    ESP.restart(); // Restart the ESP8266/ESP32
  }
}

// Function to read PMS5003 data
bool readPMS5003() {
  Serial.println("Reading PMS5003 sensor...");
  pms.wakeUp();             // Wake up the sensor before reading
  delay(1000);             // Allow sensor to stabilize
  bool pmsReadSuccess = pms.read(pmsData); // Read data
  if (pmsReadSuccess) {
    Serial.println("PMS5003 data read successfully.");
    return true;
  } else {
    Serial.println("Failed to read from PMS5003 sensor.");
    return false;
  }
  pms.sleep();
}

// Function to read MH-Z19B data
int readMHZ19B() {
  Serial.println("Reading MH-Z19B sensor...");
  int co2Value = mhz19Sensor.getCO2(); // Read CO2 concentration
  if (co2Value >= 0) {
    Serial.print("CO2: ");
    Serial.print(co2Value);
    Serial.println(" ppm");
    return co2Value;
  } else {
    Serial.println("Failed to read CO2 from MH-Z19B sensor!");
    return 0; // Return 0 as a default value (or handle the error as needed)
  }
}

// Function to send data to ThingSpeak
void sendDataToThingSpeak(int pm25Value, int co2Value) {
  Serial.println("Sending data to ThingSpeak...");
  ThingSpeak.setField(1, pm25Value); // Field 1: PM2.5
  ThingSpeak.setField(2, co2Value);  // Field 2: CO2

  int httpCode = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey); // Write the data
  if (httpCode == 200) {
    Serial.println("ThingSpeak update successful.");
  } else {
    Serial.print("Problem updating ThingSpeak. HTTP error code: ");
    Serial.println(httpCode);
  }
  Serial.println("--------------------");
}

void setup() {
  Serial.begin(115200);
  delay(100);

  // Initialize sensor serial ports
  pmsSerial.begin(9600);
  mhzSerial.begin(9600);

  // Initialize MH-Z19 sensor
  mhz19Sensor.begin(mhzSerial);
  mhz19Sensor.autoCalibration(false); // Disable auto-calibration
  Serial.println("MH-Z19 Initialized.");

  // Connect to WiFi
  connectToWiFi();

  // Initialize ThingSpeak
  ThingSpeak.begin(client);
  Serial.println("ThingSpeak Initialized.");
}

void loop() {
  unsigned long currentTime = millis();

  // Check if it's time to read sensors and update ThingSpeak
  if (currentTime - lastUpdateTime >= updateInterval) {
    lastUpdateTime = currentTime;

    // Read sensor data
    bool pmsReadSuccess = readPMS5003();
    int pm25Value = 0; // Default
    if (pmsReadSuccess)
      pm25Value = pmsData.PM_AE_UG_2_5;

    int co2Value = readMHZ19B();

    // Send data to ThingSpeak
    sendDataToThingSpeak(pm25Value, co2Value);
  }
  delay(100); // Small delay
}

